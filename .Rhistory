# Maps of Andi (villages and neighbours)
# Preliminaries -----------------------------------------------------------
# download the latest version of lingtypology
install.packages("devtools")
devtools::install_github("ropensci/lingtypology")
# load packages
library(tidyverse)
library(lingtypology)
# Map - Andi + neighbours -------------------------------------------------
# load data - load a subset of our enormous dataframe with villages where EC languages are spoken
andic <- read_tsv("andic.csv")
# (remove duplicated villages inherited from the original large file)
andic2 <- andic[!duplicated(andic$village),]
# customize the order of elements in the legend (order is alphabetical by default)
andic2$aff <- factor(andic2$aff, levels = c("Chechen", "Avar", "Andi", "other Andic"))
# draw a map
map.feature(andic2$language, # data
latitude = andic2$latitude, # custom coordinates
longitude = andic2$longitude, # custom coordinates
feature = andic2$aff, # feature to plot (in this case: language)
legend.position = "bottomleft", # position of the legend
title = "Language", # title of the legend
color = c("white", "darkseagreen", "darkolivegreen1", "darkolivegreen4"), # color for the feature values
width = 8, # size of dots on the map
tile = c("Esri.WorldTopoMap"), # appearance of the map
minimap = T) %>% # pipe another map to draw a rectangle on top of the previous map
map.feature(language = "Andi",
opacity = 0,
rectangle.lat = c(42.64, 42.84), # draw a rectangle
rectangle.lng = c(46.2, 46.35), # draw a rectangle
rectangle.color= "greenyellow", # make it a nice, brightgreen rectangle
tile = c("Esri.WorldGrayCanvas"), # appearance of the map
pipe.data = .)
# NB. Due to the pipe, we can use different tiles (map appearances) for the actual map (Esri.WorldGrayCanvas)
# and the minimap (Esri.WorldTopoMap)
# Map - Andi villages -----------------------------------------------------
# load data on Andi villages with census data
andivill <- read_tsv("andivill.csv")
# customize the order of elements in the legend
andivill$dialect <- factor(andivill$dialect, levels = c("upper", "lower", "x"))
# map with a large scale overview of all villages by dialect group
map.feature(andivill$language,
latitude = andivill$lat,
longitude = andivill$lon,
feature = andivill$dialect,
title = "Dialect group",
color = c("pink", "green", "honeydew1"),
width = 12,
tile = c("Esri.WorldGrayCanvas"))
# map with village names
map.feature(andivill$language,
latitude = andivill$lat,
longitude = andivill$lon,
feature = andivill$dialect,
title = "Dialect group",
color = c("pink", "green", "honeydew1"),
tile = c("Esri.WorldGrayCanvas"),
label = andivill$label, # add a label to each dot showing the village name
label.hide = F, # always show the label (not only on mouse-over)
label.font = "Brill") # custom label font
setwd(~\home)
getwd()
setwd(~/home/samira)
setwd(~/home)
setwd(/home/samira)
getwd()
setwd("/home/samira")
getwd()
andic <- read_tsv("andic.csv")
# (remove duplicated villages inherited from the original large file)
andic2 <- andic[!duplicated(andic$village),]
# customize the order of elements in the legend (order is alphabetical by default)
andic2$aff <- factor(andic2$aff, levels = c("Chechen", "Avar", "Andi", "other Andic"))
# draw a map
map.feature(andic2$language, # data
latitude = andic2$latitude, # custom coordinates
longitude = andic2$longitude, # custom coordinates
feature = andic2$aff, # feature to plot (in this case: language)
legend.position = "bottomleft", # position of the legend
title = "Language", # title of the legend
color = c("white", "darkseagreen", "darkolivegreen1", "darkolivegreen4"), # color for the feature values
width = 8, # size of dots on the map
tile = c("Esri.WorldTopoMap"), # appearance of the map
minimap = T) %>% # pipe another map to draw a rectangle on top of the previous map
map.feature(language = "Andi",
opacity = 0,
rectangle.lat = c(42.64, 42.84), # draw a rectangle
rectangle.lng = c(46.2, 46.35), # draw a rectangle
rectangle.color= "greenyellow", # make it a nice, brightgreen rectangle
tile = c("Esri.WorldGrayCanvas"), # appearance of the map
pipe.data = .)
andivill <- read_tsv("andivill.csv")
# customize the order of elements in the legend
andivill$dialect <- factor(andivill$dialect, levels = c("upper", "lower", "x"))
map.feature(andivill$language,
latitude = andivill$lat,
longitude = andivill$lon,
feature = andivill$dialect,
title = "Dialect group",
color = c("pink", "green", "honeydew1"),
width = 12,
tile = c("Esri.WorldGrayCanvas"),
popup = c(andivill$village, "(", andivill$inhabitants, "," andivill$census, ")"))
andivill <- read_tsv("andivill.csv")
andivill$dialect <- factor(andivill$dialect, levels = c("upper", "lower", "x"))
andivill$dialect <- factor(andivill$dialect, levels = c("upper", "lower", "x"))
map.feature(andivill$language,
latitude = andivill$lat,
longitude = andivill$lon,
feature = andivill$dialect,
title = "Dialect group",
color = c("pink", "green", "honeydew1"),
width = 12,
tile = c("Esri.WorldGrayCanvas"),
popup = paste(andivill$village, "(", andivill$inhabitants, ",", andivill$cencsus, ")")) # popup showing village name, number of inhabitants and the year of the census
map.feature(andivill$language,
latitude = andivill$lat,
longitude = andivill$lon,
feature = andivill$dialect,
title = "Dialect group",
color = c("pink", "green", "honeydew1"),
tile = c("Esri.WorldGrayCanvas"),
label = andivill$label, # add a label to each dot showing the village name
label.hide = F, # always show the label (not only on mouse-over)
label.font = "Brill") # custom label font
View(andivill)
map.feature(andivill$language,
latitude = andivill$lat,
longitude = andivill$lon,
feature = andivill$dialect,
title = "Dialect group",
color = c("pink", "green", "honeydew1"),
width = 12,
tile = c("Esri.WorldGrayCanvas"),
popup = paste(andivill$village, "(", andivill$inhabitants, ",", andivill$census, ")")) # popup showing village name, number of inhabitants and the year of the census
map.feature(andic2$language, # data
latitude = andic2$latitude, # custom coordinates
longitude = andic2$longitude, # custom coordinates
feature = andic2$aff, # feature to plot (in this case: language)
legend.position = "bottomleft", # position of the legend
title = "Language", # title of the legend
color = c("white", "darkseagreen", "darkolivegreen1", "darkolivegreen4"), # color for the feature values
width = 8, # size of dots on the map
tile = c("Esri.WorldTopoMap"), # appearance of the map,
zoom.control = T, # add zoom control
minimap = T) %>% # pipe another map to draw a rectangle on top of the previous map
map.feature(language = "Andi",
opacity = 0,
rectangle.lat = c(42.64, 42.84), # draw a rectangle
rectangle.lng = c(46.2, 46.35), # draw a rectangle
rectangle.color= "greenyellow", # make it a nice, brightgreen rectangle
tile = c("Esri.WorldGrayCanvas"), # appearance of the map
pipe.data = .)
map.feature(andivill$language,
latitude = andivill$lat,
longitude = andivill$lon,
feature = andivill$dialect,
title = "Dialect group",
color = c("pink", "green", "honeydew1"),
width = 12,
tile = c("Esri.WorldGrayCanvas"),
popup = paste(andivill$village, "(", andivill$inhabitants, ",", andivill$census, ")")) # popup showing village name, number of inhabitants and the year of the census
map.feature(andivill$language,
latitude = andivill$lat,
longitude = andivill$lon,
feature = andivill$dialect,
title = "Dialect group",
color = c("pink", "green", "honeydew1"),
tile = c("Esri.WorldGrayCanvas"),
label = andivill$label, # add a label to each dot showing the village name
label.hide = F, # always show the label (not only on mouse-over)
label.font = "Brill") # custom label font
getwd()
library(tidyverse)
library(lingtypology)
# Map - Andi + neighbours -------------------------------------------------
# load data - load a subset of our enormous dataframe with villages where EC languages are spoken
andic <- read_tsv("andic.csv")
# (remove duplicated villages inherited from the original large file)
andic2 <- andic[!duplicated(andic$village),]
# customize the order of elements in the legend (order is alphabetical by default)
andic2$aff <- factor(andic2$aff, levels = c("Chechen", "Avar", "Andi", "other Andic"))
# draw a map
map.feature(andic2$language, # data
latitude = andic2$latitude, # custom coordinates
longitude = andic2$longitude, # custom coordinates
feature = andic2$aff, # feature to plot (in this case: language)
legend.position = "bottomleft", # position of the legend
title = "Language", # title of the legend
color = c("white", "darkseagreen", "darkolivegreen1", "darkolivegreen4"), # color for the feature values
width = 8, # size of dots on the map
tile = c("Esri.WorldTopoMap"), # appearance of the map,
zoom.control = T, # add zoom control
minimap = T) %>% # pipe another map to draw a rectangle on top of the previous map
map.feature(language = "Andi",
opacity = 0,
rectangle.lat = c(42.64, 42.84), # draw a rectangle
rectangle.lng = c(46.2, 46.35), # draw a rectangle
rectangle.color= "greenyellow", # make it a nice, brightgreen rectangle
tile = c("Esri.WorldGrayCanvas"), # appearance of the map
pipe.data = .)
# NB. Due to the pipe, we can use different tiles (map appearances) for the actual map (Esri.WorldGrayCanvas)
# and the minimap (Esri.WorldTopoMap)
# Map - Andi villages -----------------------------------------------------
# load data on Andi villages with census data
andivill <- read_tsv("andivill.csv")
# customize the order of elements in the legend
andivill$dialect <- factor(andivill$dialect, levels = c("upper", "lower", "x"))
# map with a large scale overview of all villages by dialect group
map.feature(andivill$language,
latitude = andivill$lat,
longitude = andivill$lon,
feature = andivill$dialect,
title = "Dialect group",
color = c("pink", "green", "honeydew1"),
width = 12,
tile = c("Esri.WorldGrayCanvas"),
popup = paste(andivill$village, "(", andivill$inhabitants, ",", andivill$census, ")")) # popup showing village name, number of inhabitants and the year of the census
# map with village names
map.feature(andivill$language,
latitude = andivill$lat,
longitude = andivill$lon,
feature = andivill$dialect,
title = "Dialect group",
color = c("pink", "green", "honeydew1"),
tile = c("Esri.WorldGrayCanvas"),
label = andivill$label, # add a label to each dot showing the village name (I added empty values for the non-core villages)
label.hide = F, # always show the label (not only on mouse-over)
label.font = "Brill") # custom label font
map.feature(andivill$language,
latitude = andivill$lat,
longitude = andivill$lon,
feature = andivill$dialect,
title = "Dialect group",
color = c("pink", "green", "honeydew1"),
width = 12,
tile = c("Esri.WorldGrayCanvas"),
zoom.control = T,
popup = paste(andivill$village, "(", andivill$inhabitants, ",", andivill$census, ")")) # popup showing village name, number of inhabitants and the year of the census
map.feature(andivill$language,
latitude = andivill$lat,
longitude = andivill$lon,
feature = andivill$dialect,
title = "Dialect group",
color = c("pink", "green", "honeydew1"),
tile = c("Esri.WorldGrayCanvas"),
zoom.control = T,
label = andivill$label, # add a label to each dot showing the village name (I added empty values for the non-core villages)
label.hide = F, # always show the label (not only on mouse-over)
label.font = "Brill") # custom label font
knitr::opts_chunk$set(echo = FALSE, message = FALSE, comment = "", warning = FALSE)
library(tidyverse)
library(lingtypology)
coord <- read_tsv("data/coordinates.tsv")
# empty <- coord$label[1]
# coord %>%
#   filter(label != empty) %>%
#   summarise(min(Lat), max(Lat), min(Lon), max(Lon))
## A tibble: 1 x 4
#   `min(Lat)` `max(Lat)` `min(Lon)` `max(Lon)`
#        <dbl>      <dbl>      <dbl>      <dbl>
# 1       42.6       42.8       46.2       46.4
coord %>%
filter(Lat > 42.6,
Lat < 42.9,
Lon > 46.1,
Lon < 46.5) %>%
mutate(label = if_else(is.na(label), "", label)) ->
coord
map.feature(coord$Language,
features = coord$Language,
latitude = coord$Lat,
longitude = coord$Lon,
label = coord$label,
label.hide = FALSE,
shape = TRUE,
zoom.level = 11,
tile = "Stamen.TonerBackground")
getwd()
setwd("/home/2018_Zilo_classes_article")
setwd("~/home/2018_Zilo_classes_article")
setwd("~/home/2018_Zilo_classes_article")
setwd("~/home/samira/2018_Zilo_classes_article")
setwd("/home/samira/2018_Zilo_classes_article")
getwd()
coord <- read_tsv("data/coordinates.tsv")
# empty <- coord$label[1]
# coord %>%
#   filter(label != empty) %>%
#   summarise(min(Lat), max(Lat), min(Lon), max(Lon))
## A tibble: 1 x 4
#   `min(Lat)` `max(Lat)` `min(Lon)` `max(Lon)`
#        <dbl>      <dbl>      <dbl>      <dbl>
# 1       42.6       42.8       46.2       46.4
coord %>%
filter(Lat > 42.6,
Lat < 42.9,
Lon > 46.1,
Lon < 46.5) %>%
mutate(label = if_else(is.na(label), "", label)) ->
coord
map.feature(coord$Language,
features = coord$Language,
latitude = coord$Lat,
longitude = coord$Lon,
label = coord$label,
label.hide = FALSE,
shape = TRUE,
zoom.level = 11,
tile = "Stamen.TonerBackground")
read_csv("data/table_1.csv", na = "")
df <- read_csv("data/zilo_class_experiment.csv")
df %>%
mutate(class = if_else(class == "b", 1, 0)) %>%
select(-sex, -age_2017) %>%
spread(s_id, class) %>%
select(`1`:`16`) %>%
summarise(agree = irr::agree(.)$value,
fleiss = irr::kappam.fleiss(.)$value,
fleiss_z = irr::kappam.fleiss(.)$statistic,
type = "all") ->
all
df %>%
filter(stimulus_source == "loan") %>%
mutate(class = if_else(class == "b", 1, 0)) %>%
select(-sex, -age_2017) %>%
spread(s_id, class) %>%
select(`1`:`16`) %>%
summarise(agree = irr::agree(.)$value,
fleiss = irr::kappam.fleiss(.)$value,
fleiss_z = irr::kappam.fleiss(.)$statistic,
type = "loan") ->
loan
df %>%
filter(stimulus_source == "native") %>%
mutate(class = if_else(class == "b", 1, 0)) %>%
select(-sex, -age_2017) %>%
spread(s_id, class) %>%
select(`1`:`16`) %>%
summarise(agree = irr::agree(.)$value,
fleiss = irr::kappam.fleiss(.)$value,
fleiss_z = irr::kappam.fleiss(.)$statistic,
type = "native") ->
native
all_agreement <- rbind(all, native, loan)
install.packages("irr")
